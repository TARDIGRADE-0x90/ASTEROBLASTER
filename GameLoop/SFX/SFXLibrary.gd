extends Node

"""
sound key: filepath, volume, pitch (-1 for no pitch)
"""
enum SOUNDS {
	PLAYER_HURT,
	PLAYER_FIRE,
	ENEMY_FIRE,
	EXPLOSION1,
	EXPLOSION2,
	UPGRADE_READY,
	UPGRADE_ENTER,
	UPGRADE_EXIT,
	UPGRADE_REQUEST,
	UPGRADE_DENY,
	COLLECT,
	HIT,
	CONFIRM,
	INSUFFICIENT
}

const FILEPATH: int = 0
const VOLUME: int = 1
const PITCH: int = 2

const PLAYER_HURT_VOLUME: int = 30
const EXPLOSION1_VOLUME: int = 30
const EXPLOSION2_VOLUME: int = 30
const PLAYER_FIRE_VOLUME: int = 15
const ENEMY_FIRE_VOLUME: int = 20
const UPGRADE_READY_VOLUME: int = 30
const UPGRADE_ENTER_VOLUME: int = 30 #Rebalance the audio later
const UPGRADE_EXIT_VOLUME: int = 30
const UPGRADE_REQUEST_VOLUME: int = 30
const UPGRADE_DENY_VOLUME: int = 25
const COLLECT_VOLUME: int = 25
const HIT_VOLUME: int = 25
const CONFIRM_VOLUME: int = 30
const INSUFFICIENT_VOLUME: int = 30

const NO_PITCH: float = -1
const PLAYER_HURT_PITCH: float = 0.9
const PLAYER_FIRE_PITCH: float = 1.0
const EXPLOSION1_PITCH: float = 0.9
const EXPLOSION2_PITCH: float = 0.8
const ENEMY_FIRE_PITCH: float = 0.8
const HIT_PITCH: float = 0.9

const LIBRARY: Dictionary = {
	SOUNDS.PLAYER_HURT: [FilePaths.SFX_PLAYER_HURT, PLAYER_HURT_VOLUME, PLAYER_HURT_PITCH],
	SOUNDS.PLAYER_FIRE: [FilePaths.SFX_PLAYER_FIRE, PLAYER_FIRE_VOLUME, PLAYER_FIRE_PITCH],
	SOUNDS.ENEMY_FIRE: [FilePaths.SFX_ENEMY_FIRE, ENEMY_FIRE_VOLUME, ENEMY_FIRE_PITCH],
	SOUNDS.EXPLOSION1: [FilePaths.SFX_EXPLOSION1, EXPLOSION1_VOLUME, EXPLOSION1_PITCH],
	SOUNDS.EXPLOSION2: [FilePaths.SFX_EXPLOSION2, EXPLOSION2_VOLUME, EXPLOSION2_PITCH],
	SOUNDS.UPGRADE_READY: [FilePaths.SFX_UPGRADE_READY, UPGRADE_READY_VOLUME, NO_PITCH],
	SOUNDS.UPGRADE_ENTER: [FilePaths.SFX_UPGRADE_ENTER, UPGRADE_ENTER_VOLUME, NO_PITCH],
	SOUNDS.UPGRADE_EXIT: [FilePaths.SFX_UPGRADE_EXIT, UPGRADE_EXIT_VOLUME, NO_PITCH],
	SOUNDS.UPGRADE_REQUEST: [FilePaths.SFX_UPGRADE_REQUEST, UPGRADE_REQUEST_VOLUME, NO_PITCH],
	SOUNDS.UPGRADE_DENY: [FilePaths.SFX_UPGRADE_DENY, UPGRADE_DENY_VOLUME, NO_PITCH],
	SOUNDS.COLLECT: [FilePaths.SFX_COLLECT, COLLECT_VOLUME, NO_PITCH],
	SOUNDS.HIT: [FilePaths.SFX_HIT, HIT_VOLUME, HIT_PITCH],
	SOUNDS.CONFIRM: [FilePaths.SFX_CONFIRM, CONFIRM_VOLUME, NO_PITCH],
	SOUNDS.INSUFFICIENT: [FilePaths.SFX_INSUFFICIENT, INSUFFICIENT_VOLUME, NO_PITCH]
}

func _ready() -> void: #Allows for sounds to play during pause
	set_process_mode(Node.PROCESS_MODE_ALWAYS)
